#version: '3.7'

networks:
  cdc_network:
    driver: bridge

services:
  redpanda-0:
    container_name: redpanda-0
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
    networks:
      - cdc_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9644/v1/status/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5


  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.7.1
    networks:
      - cdc_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
        connect:
          enabled: true
          clusters:
            - name: "DebeziumConnect"
              url: "http://debezium-kafka-connect:8083"  # The URL where Kafka Connect is running
    ports:
      - 8080:8080
    depends_on:
      redpanda-0:
        condition: service_healthy


  db2server:
    container_name: db2server
    build:
      context: ./db2server
    privileged: True
    ports:
     - 50000:50000
    environment:
     - LICENSE=accept
     - DBNAME=TESTDB
     - DB2INST1_PASSWORD=password
    networks:
      - cdc_network
    healthcheck:
      # su - db2inst1 ensures we run db2 commands under the DB2 instance user
      test: ["CMD", "su", "-", "db2inst1", "-c", "db2 connect to TESTDB && db2 \"select 1 from sysibm.sysdummy1\""]
      interval: 30s
      timeout: 10s
      retries: 5


  debezium-kafka-connect:
    container_name: debezium-kafka-connect
    image: debezium/connect-db2:2.6
    build:
      context: ./db2connect
    networks:
      - cdc_network
    ports:
     - 5005:5005
     - 1976:1976
     - 8083:8083
    environment:
     - BOOTSTRAP_SERVERS=redpanda-0:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses
    depends_on:
      - redpanda-0
      - db2server
      - redpanda-console
    healthcheck:
      test:
        - CMD-SHELL
        - "curl -s http://debezium-kafka-connect:8083/ | grep -q '{\"version\":' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 20


  configure-debezium-db2-source:
    container_name: configure-debezium-db2-source
    image: curlimages/curl:latest
    networks:
      - cdc_network
    command: >
      curl -X POST -H "Content-Type: application/json" --data @/_register-db2-source.json http://debezium-kafka-connect:8083/connectors
    volumes:
      - ./db2connect/_register-db2-source.json:/_register-db2-source.json
    restart: 'no'
    depends_on:
      debezium-kafka-connect:
        condition: service_healthy
      db2server:
        condition: service_healthy

 
